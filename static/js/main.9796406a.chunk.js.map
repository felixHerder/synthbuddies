{"version":3,"sources":["constants.js","reducers.js","components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","Cardlist","console","log","map","user","Searchbox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Header","Component","ErrorBoundry","state","hasError","info","this","setState","App","onRequestRobots","frobots","filter","elem","toLowerCase","includes","onSearchChange","React","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9796406a.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\"\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false })\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) => {\r\n    return (\r\n        <div className='f7 tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt=\"synths\" src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardlist = ({ robots }) => {\r\n    //if(true) throw new Error(\"Hell no!\");\r\n    console.log('Cardlist rendered');\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(user => {\r\n                    return <Card key={user.id} id={user.id} name={user.name} email={user.email} />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({ searchfield, searchChange }) => {\r\n    console.log('Searchbox rendered');\r\n    return (\r\n        <div className='pa2 '>\r\n            <input\r\n                aria-label=\"Search Robots\"\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' placeholder='search synths'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react'\r\n\r\nconst Scroll = (props) =>\r\n{\r\n  return(\r\n    <div style={{overflowY:'scroll', border:'1px solid black', height:'800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n// import CounterBtn from './CounterBtn';\r\n\r\nclass Header extends Component {\r\n  // shouldComponentUpdate(nextProps, nextState) {\r\n  //   return true;\r\n  // }\r\n  render() {\r\n    console.log(\"Header rendered\");\r\n    return (\r\n      <div>\r\n        <h1 className='f2'>Synthfriends</h1>\r\n        {/* <CounterBtn color={\"red\"} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = { hasError: false}\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({hasError: true});\r\n  }\r\n\r\n  render(){\r\n    if(this.state.hasError)\r\n      return <h1>Thats is not good</h1>;\r\n    return this.props.children;\r\n  }\r\n  \r\n}\r\n\r\nexport default ErrorBoundry;","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport ErroBoundry from '../components/ErrorBoundry';\r\nimport \"./App.css\";\r\n\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\nconst mapStatetoProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const frobots = this.props.robots.filter((elem) => elem.name.toLowerCase().includes(this.props.searchField.toLowerCase()));\r\n\r\n        return this.props.isPending ?\r\n            <h1>Loading synths...</h1>\r\n            :\r\n            (<div className=\"tc\">\r\n                <Header />\r\n                <Searchbox searchChange={this.props.onSearchChange} />\r\n                <Scroll>\r\n                    <ErroBoundry>\r\n                        <Cardlist robots={frobots} />\r\n                    </ErroBoundry>\r\n                </Scroll>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\"\r\n\r\nexport const setSearchField = (text) => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n// import { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\n\r\n// const logger = createLogger();\r\nconst rootReducer = combineReducers(({ searchRobots, requestRobots }));\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}